#!/bin/bash
#
# License: GPLv2

shopt -s nullglob

table_format() {
    if which column >/dev/null 2>&1; then
        # column is optional
        # column does a better job with less extra whitespace, and long fields not messing up the rest of the line
        column -t
    else
        # otherwise rely on printf
        cat
    fi
}

# gets label... another name for the device
# for lvm, we take the dm-x device and get the name like vgname--lvname
get_device_label() {
    local d="$1"
    if grep -Eq "^dm-[0-9]+$" <<< "$d"; then
        local minor=$(grep -Eo "[0-9]+$" <<< "$d")
        local device_label=$(dmsetup ls | grep "(254:$minor)" | awk '{print $1}')
    else
        local device_label=""
    fi
    echo "$device_label"
}

declare -A backing_devices
print_device() {
    local d="$1"
    local n="$2"
    
    if [ -z "$d" ]; then
        echo "ERROR: bcache link for $p is broken" >&2
        return
    fi
    if [ "${cache_devices["$d"]}" = 1 ]; then
        # skip slaves that are also printed above as type cache
        return
    fi
    if [ "$n" = "bcache" ]; then
        n=-
    fi
    if [ ! -e /dev/"$d" ]; then
        echo "ERROR: /dev/$d does not exist" >&2
        device_label=-
        cache_state=-
        c=-
        uuid=-
    else
        device_label=$(get_device_label "$d")
        if [ -z "$device_label" ]; then
            device_label="-"
        fi
        cache_state=$(bcache-super-show /dev/"$d" | awk '$1 == "dev.data.cache_state" {print $2}')
        if [ "$cache_state" = 0 ]; then
            # if cache is detached, don't print the bogus uuid
            c="-"
        else
            c=$(bcache-super-show /dev/"$d" | awk '$1 == "cset.uuid" {print $2}')
        fi
        uuid=$(bcache-super-show /dev/"$d" | awk '$1 == "dev.uuid" {print $2}')
    fi
    
    if [ -n "$uuid" -a "$uuid" != "-" -a "${backing_devices["$uuid"]}" = 1 ]; then
        # skip slaves that are also printed above as type backing
        return
    fi
    
    if [ -z "$uuid" ]; then
        # this happens when /dev/"$d" doesn't exist, like if the disk died
        uuid="-"
    fi
    
    printf "%-7s  %-36s  %-10s  %-10s  %-10s  %-30s\n" "backing" "$uuid" "$n" "$d" "$device_label" "$c"
    if [ "$uuid" != "-" ]; then
        backing_devices["$uuid"]=1
    fi
}

lsbcache_m() {
    printf "%-7s  %-36s  %-10s  %-10s  %-10s  %-30s\n" "type" "uuid" "name" "device" "label" "cache"
    
    # find cache devices, which are in /sys/fs/bcache/ instead of /sys/block/
    declare -A cache_devices
    for p in /sys/fs/bcache/*-*-*-*-*; do
        uuid=$(basename "$p")
        for x in "$p"/cache[0-9]*; do
            # link might look like:
            #     ../../../devices/virtual/block/dm-8/bcache
            #     ../../../devices/pci0000:00/0000:00:03.0/0000:05:00.0/nvme/nvme0/nvme0n1/nvme0n1p10/bcache
            d=$(readlink "$x" | awk -F/ '{print $(NF-1)}')
            
            device_label=$(get_device_label "$d")
            if [ -z "$device_label" ]; then
                device_label="-"
            fi
            cache_devices["$d"]=1
            printf "%-7s  %-36s  %-10s  %-10s  %-10s -\n" "cache" "$uuid" "-" "$d" "$device_label"
        done
    done
    
    # find bache devices that are running
    for p in /sys/block/bcache[0-9]*; do
        for s in "$p"/slaves/*; do
            d=$(readlink "$s" | awk -F/ '{print $NF}')
            print_device "$d" "$(basename "$p")"
        done
    done
    
    # find bcache devices that are registered, but not running
    for p in /sys/block/*/bcache; do
        d=$(readlink -f "$p"/.. | awk -F/ '{print $NF}')
        print_device "$d" "-"
    done
}

lsbcache() {
    lsbcache_m | table_format
}

lsbcache
